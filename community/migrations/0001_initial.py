# Generated by Django 3.2.8 on 2021-12-01 05:34

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField()),
                ('title', models.CharField(max_length=30)),
                ('content', models.CharField(max_length=500)),
                ('modified', models.IntegerField()),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PostComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=100)),
                ('creation_date', models.DateTimeField()),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PostCommentCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_likes', models.IntegerField()),
                ('count_reports', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PostCommentReply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=100)),
                ('creation_date', models.DateTimeField()),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PostCommentReplyCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_likes', models.IntegerField()),
                ('count_reports', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PostCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_likes', models.IntegerField()),
                ('count_comments', models.IntegerField()),
                ('count_saved', models.IntegerField()),
                ('count_reports', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='QnaPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30)),
                ('content', models.CharField(max_length=500)),
                ('creation_date', models.DateTimeField()),
                ('modified', models.IntegerField()),
                ('solved', models.IntegerField()),
                ('type', models.IntegerField()),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='QnaPostAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=500)),
                ('creation_date', models.DateTimeField()),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='QnaPostAnswerComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=100)),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='QnaPostCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_total_likes', models.IntegerField()),
                ('count_answers', models.IntegerField()),
                ('count_saved', models.IntegerField()),
                ('count_total_comments', models.IntegerField()),
                ('count_reports', models.IntegerField()),
                ('qna_post', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='community.qnapost')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='QnaPostAnswerCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_likes', models.IntegerField()),
                ('count_comments', models.IntegerField()),
                ('count_reports', models.IntegerField()),
                ('qna_post_answer', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='community.qnapostanswer')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='QnaPostAnswerCommentReply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=100)),
                ('qna_post_answer_comment', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='community.qnapostanswercomment')),
            ],
            options={
                'managed': True,
            },
        ),
    ]
